“SmartCartCompanion” by Benjamin Miller. This algorithm will suggest complementary items that go well with the products in the user’s cart, enhancing the shopping experience and potentially increasing the average order value. We’ll implement this in five different programming languages: JavaScript, Python, PHP, Ruby, and Java.

Algorithm Overview
Analyze Cart Items: Identify the main product categories and attributes.
Recommend Complementary Items: Suggest items that are frequently bought together or complement the main products.
Responsive Design: Ensure the recommendations are displayed effectively across different devices.
JavaScript (Node.js)
JavaScript

const recommendations = {
    "laptop": ["mouse", "keyboard", "laptop stand"],
    "phone": ["phone case", "screen protector", "charger"]
};

function getRecommendations(cartItems) {
    let recommendedItems = [];
    cartItems.forEach(item => {
        if (recommendations[item]) {
            recommendedItems = recommendedItems.concat(recommendations[item]);
        }
    });
    return recommendedItems;
}

// Example usage
const cartItems = ["laptop"];
console.log(getRecommendations(cartItems)); // Output: ["mouse", "keyboard", "laptop stand"]
AI-generated code. Review and use carefully. More info on FAQ.
Python
Python

recommendations = {
    "laptop": ["mouse", "keyboard", "laptop stand"],
    "phone": ["phone case", "screen protector", "charger"]
}

def get_recommendations(cart_items):
    recommended_items = []
    for item in cart_items:
        if item in recommendations:
            recommended_items.extend(recommendations[item])
    return recommended_items

# Example usage
cart_items = ["laptop"]
print(get_recommendations(cart_items))  # Output: ["mouse", "keyboard", "laptop stand"]
AI-generated code. Review and use carefully. More info on FAQ.
PHP
PHP

$recommendations = [
    "laptop" => ["mouse", "keyboard", "laptop stand"],
    "phone" => ["phone case", "screen protector", "charger"]
];

function getRecommendations($cartItems) {
    global $recommendations;
    $recommendedItems = [];
    foreach ($cartItems as $item) {
        if (array_key_exists($item, $recommendations)) {
            $recommendedItems = array_merge($recommendedItems, $recommendations[$item]);
        }
    }
    return $recommendedItems;
}

// Example usage
$cartItems = ["laptop"];
print_r(getRecommendations($cartItems));  // Output: ["mouse", "keyboard", "laptop stand"]
AI-generated code. Review and use carefully. More info on FAQ.
Ruby
Ruby

recommendations = {
    "laptop" => ["mouse", "keyboard", "laptop stand"],
    "phone" => ["phone case", "screen protector", "charger"]
}

def get_recommendations(cart_items)
    recommended_items = []
    cart_items.each do |item|
        if recommendations.key?(item)
            recommended_items.concat(recommendations[item])
        end
    end
    recommended_items
end

# Example usage
cart_items = ["laptop"]
puts get_recommendations(cart_items)  # Output: ["mouse", "keyboard", "laptop stand"]
AI-generated code. Review and use carefully. More info on FAQ.
Java
Java

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmartCartCompanion {
    private static final Map<String, List<String>> recommendations = new HashMap<>();

    static {
        recommendations.put("laptop", List.of("mouse", "keyboard", "laptop stand"));
        recommendations.put("phone", List.of("phone case", "screen protector", "charger"));
    }

    public static List<String> getRecommendations(List<String> cartItems) {
        List<String> recommendedItems = new ArrayList<>();
        for (String item : cartItems) {
            if (recommendations.containsKey(item)) {
                recommendedItems.addAll(recommendations.get(item));
            }
        }
        return recommendedItems;
    }

    // Example usage
    public static void main(String[] args) {
        List<String> cartItems = List.of("laptop");
        System.out.println(getRecommendations(cartItems));  // Output: [mouse, keyboard, laptop stand]
    }
}

Responsive Design with CSS
CSS

.recommendations {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.recommendation-item {
    flex: 1 1 calc(33.333% - 10px);
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 10px;
    text-align: center;
}

@media (max-width: 600px) {
    .recommendation-item {
        flex: 1 1 100%;
    }
}
