name;Anomaly Detection using Z-Score
Created by Benjamin Hunter Miller 

 This algorithm can be used in various industries for TinyML (Tiny Machine Learning) applications. Anomaly detection is crucial for identifying unusual patterns that do not conform to expected behavior, which is useful in many fields.

1. Python
Algorithm: Anomaly Detection using Z-Score

Description: This algorithm calculates the Z-score for each data point to determine how far it deviates from the mean. If the Z-score exceeds a certain threshold, the data point is considered an anomaly.

Usage:

Industry: Manufacturing
Application: Detecting defects in products on a production line.
Python

import numpy as np

def detect_anomalies(data, threshold=3):
    mean = np.mean(data)
    std_dev = np.std(data)
    anomalies = []
    for i, value in enumerate(data):
        z_score = (value - mean) / std_dev
        if np.abs(z_score) > threshold:
            anomalies.append((i, value))
    return anomalies

data = [10, 12, 12, 13, 12, 11, 10, 100, 12, 11]
print(detect_anomalies(data))
AI-generated code. Review and use carefully. More info on FAQ.
2. C++
Algorithm: Anomaly Detection using Z-Score

Description: Similar to the Python version, this algorithm calculates the Z-score for each data point to identify anomalies.

Usage:

Industry: Healthcare
Application: Monitoring patient vital signs for abnormal readings.
#include <iostream>
#include <vector>
#include <cmath>

std::vector<std::pair<int, double>> detect_anomalies(const std::vector<double>& data, double threshold = 3.0) {
    double sum = 0.0, mean, std_dev = 0.0;
    int n = data.size();
    for (double value : data) sum += value;
    mean = sum / n;
    for (double value : data) std_dev += pow(value - mean, 2);
    std_dev = sqrt(std_dev / n);

    std::vector<std::pair<int, double>> anomalies;
    for (int i = 0; i < n; ++i) {
        double z_score = (data[i] - mean) / std_dev;
        if (fabs(z_score) > threshold) anomalies.push_back({i, data[i]});
    }
    return anomalies;
}

int main() {
    std::vector<double> data = {10, 12, 12, 13, 12, 11, 10, 100, 12, 11};
    auto anomalies = detect_anomalies(data);
    for (const auto& anomaly : anomalies) {
        std::cout << "Anomaly at index " << anomaly.first << ": " << anomaly.second << std::endl;
    }
    return 0;
}

3. JavaScript
Algorithm: Anomaly Detection using Z-Score

Description: This JavaScript version calculates the Z-score for each data point to identify anomalies.

Usage:

Industry: Finance
Application: Detecting fraudulent transactions.
JavaScript

function detectAnomalies(data, threshold = 3) {
    const mean = data.reduce((a, b) => a + b, 0) / data.length;
    const stdDev = Math.sqrt(data.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / data.length);
    const anomalies = [];
    data.forEach((value, index) => {
        const zScore = (value - mean) / stdDev;
        if (Math.abs(zScore) > threshold) {
            anomalies.push({ index, value });
        }
    });
    return anomalies;
}

const data = [10, 12, 12, 13, 12, 11, 10, 100, 12, 11];
console.log(detectAnomalies(data));
AI-generated code. Review and use carefully. More info on FAQ.
4. Java
Algorithm: Anomaly Detection using Z-Score

Description: This Java version calculates the Z-score for each data point to identify anomalies.

Usage:

Industry: Retail
Application: Identifying unusual sales patterns.
Java

import java.util.ArrayList;
import java.util.List;

public class AnomalyDetection {
    public static List<int[]> detectAnomalies(double[] data, double threshold) {
        double sum = 0.0, mean, stdDev = 0.0;
        int n = data.length;
        for (double value : data) sum += value;
        mean = sum / n;
        for (double value : data) stdDev += Math.pow(value - mean, 2);
        stdDev = Math.sqrt(stdDev / n);

        List<int[]> anomalies = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            double zScore = (data[i] - mean) / stdDev;
            if (Math.abs(zScore) > threshold) anomalies.add(new int[]{i, (int) data[i]});
        }
        return anomalies;
    }

    public static void main(String[] args) {
        double[] data = {10, 12, 12, 13, 12, 11, 10, 100, 12, 11};
        List<int[]> anomalies = detectAnomalies(data, 3.0);
        for (int[] anomaly : anomalies) {
            System.out.println("Anomaly at index " + anomaly[0] + ": " + anomaly[1]);
        }
    }
}
AI-generated code. Review and use carefully. More info on FAQ.
5. Rust
Algorithm: Anomaly Detection using Z-Score

Description: This Rust version calculates the Z-score for each data point to identify anomalies.

Usage:

Industry: Energy
Application: Monitoring energy consumption for unusual spikes.
Rust

fn detect_anomalies(data: &[f64], threshold: f64) -> Vec<(usize, f64)> {
    let mean: f64 = data.iter().sum::<f64>() / data.len() as f64;
    let std_dev: f64 = (data.iter().map(|&x| (x - mean).powi(2)).sum::<f64>() / data.len() as f64).sqrt();
    data.iter().enumerate().filter_map(|(i, &value)| {
        let z_score = (value - mean) / std_dev;
        if z_score.abs() > threshold {
            Some((i, value))
        } else {
            None
        }
    }).collect()
}

fn main() {
    let data = vec![10.0, 12.0, 12.0, 13.0, 12.0, 11.0, 10.0, 100.0, 12.0, 11.0];
    let anomalies = detect_anomalies(&data, 3.0);
    for (index, value) in anomalies {
        println!("Anomaly at index {}: {}", index, value);
    }
}
